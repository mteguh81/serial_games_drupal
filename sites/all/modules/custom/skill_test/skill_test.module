<?php

	function skill_test_permission(){
   		return array(
	       	'skill_test' => array('title' => 'Access Skill Test Module')
   		);
	}

	function skill_test_menu() {
  		$items['skill_test/upload_file'] = array (
     		'title' => 'Upload File',
     		'type' => MENU_CALLBACK,
     		'page callback' => 'page_upload_file',
     		'access arguments' => array('skill_test'),
   		);
   		$items['skill_test/game_score'] = array (
     		'title' => 'Game Score',
     		'type' => MENU_CALLBACK,
     		'page callback' => 'page_game_score',
     		'access arguments' => array('skill_test'),
   		);
   		$items['skill_test/game_rank'] = array (
     		'title' => 'Input Game Rank',
     		'type' => MENU_CALLBACK,
     		'page callback' => 'act_game_rank',
     		'access arguments' => array('skill_test'),
   		);
   		$items['skill_test/logout'] = array (
     		'title' => 'Log Out',
     		'type' => MENU_CALLBACK,
     		'page callback' => 'act_logout',
     		'access arguments' => array('skill_test'),
   		);
   		$menu['skill_test/list_file'] = array
  		(
    		'title' => 'List Uploaded File',
    		'type' => MENU_CALLBACK,
    		'page callback' => 'page_list_file',
    		'access callback' => TRUE,
  		);

  		return $items;
	}

	function skill_test_theme()
	{
  		 return array(
	        'list_file' => array(
	            'render element' => 'elements',
	            'template' => 'templates/list-file',
	            'variables' => array('contents' => ''),
        	),
    	);
	}

	function page_list_file()
	{
		$query = new EntityFieldQuery();
		$result = $query->entityCondition('entity_type', 'node')
  			->entityCondition('bundle','list_file')
  			->execute();
		$nodes = node_load_multiple(array_keys($result['node']));

		return theme('list_file', array('contents' => $nodes));
	}

	function page_upload_file()
	{
		$form_upload_file = drupal_get_form('form_upload_file');
		$output = drupal_render($form_upload_file);
		$output .= page_list_file();

		return $output; 
	}

	function form_upload_file($form,$form_state)
	{
		$form['up'] = array(
			'#type' => 'fieldset',
			'#title' => 'Upload',
		);

		$form['up']['file'] = array(
			'#type' => 'file',
			'#title' => 'File',
			'#required' => FALSE,
		);

		$form['up']['submit'] = array(
			'#type' => 'submit',
			'#value' => 'Upload',
		);

		return $form;
	}

	function form_upload_file_submit($form,$form_state)
	{
		$url = 'http://localhost/serial_games_drupal/api/registration/registration/upload.xml'; // request URL
		$filename = $_FILES['files']['name']['file'];
		$filedata = $_FILES['files']['tmp_name']['file'];
		$filesize = $_FILES['files']['size']['file'];
		if ($filedata != '')
		{
    		$headers = array("Content-Type:multipart/form-data"); // cURL headers for file uploading
    		$postfields = array("filedata" => "@$filedata", "filename" => $filename);
    		$ch = curl_init();
    		$options = array(
        		CURLOPT_URL => $url,
        		CURLOPT_HEADER => true,
        		CURLOPT_POST => 1,
        		CURLOPT_HTTPHEADER => $headers,
        		CURLOPT_POSTFIELDS => $postfields,
        		CURLOPT_INFILESIZE => $filesize,
        		CURLOPT_RETURNTRANSFER => true
    		); // cURL options
    		curl_setopt_array($ch, $options);
    		$response = curl_exec($ch);
    		if(!curl_errno($ch))
    		{
	        	$info = curl_getinfo($ch);
        		if ($info['http_code'] == 200)
	            	$errmsg = "File uploaded successfully";
    		}
    		else
    		{
	        	$errmsg = curl_error($ch);
    		}
    		
    		$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
			$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
			$header = substr($response, 0, $header_size);
			$body = substr($response, $header_size);

			curl_close($ch);

			drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");

			$xml = simplexml_load_string($body);
			$json = json_encode($xml);
			$obj = json_decode($json);
			//$array = json_decode($json,TRUE);
			drupal_set_message("<pre>".print_r($obj,TRUE)."</pre>");
		}
		else
		{
    		$errmsg = "Please select the file";
		}
		
		drupal_set_message($errmsg);
	}

	function page_game_score()
	{
		/*global $user;
    	drupal_set_message("<pre>".print_r($user,TRUE)."</pre>");*/

		$form_game_score = drupal_get_form('form_game_score');
		$output = drupal_render($form_game_score);
		$output .= page_list_game_leaderboard();
		return $output; 
	}

	function form_game_score($form,$form_state)
	{
		global $user;

		$form['game_score'] = array(
			'#type' => 'fieldset',
			'#title' => 'Add Data',
		);

		$form['game_score']['game_name'] = array(
	        '#title' => 'Game Name',
	        '#description' => 'Enter game name.',
	        '#type' => 'textfield',
	        '#required' => TRUE,
	    );

	    $form['game_score']['player'] = array(
	        '#title' => 'Player Name',
	        '#description' => 'Enter player name.',
	        '#type' => 'textfield',
	        '#required' => TRUE,
	    );

	    $form['game_score']['score'] = array(
	        '#title' => 'Score',
	        '#description' => 'Enter game score.',
	        '#type' => 'textfield',
	        '#required' => TRUE,
	    );

	    $form['game_score']['type'] = array(
	    	'#title' => 'Type',
	    	'#description' => 'Select game type.',
	    	'#type' => 'select',
	    	'#options' => array('A' => 'A', 'B' => 'B', 'C' => 'C', 'D' => 'D', 'E' => 'E', 'F' => 'F', 'G' => 'G', 'H' => 'H', 
	    						'I' => 'I', 'J' => 'J'),
	        '#required' => TRUE,
	    );
	    
	    $form['game_score']['submit'] = array(
	        '#type' => 'submit',
	        '#value' => t('Save'),
	    );

	     return $form;
	}


	function form_game_score_submit($form,$form_state)
	{
		$game_name = $form_state['values']['game_name'];
		$player = $form_state['values']['player'];
		$score = $form_state['values']['score'];
		$type = $form_state['values']['type'];

		generate_game_score($game_name,$player,$score,$type);
	}

	function page_list_game_leaderboard()
	{
		$output = "<table>
						<tr>
							<td>Game Name</td>
							<td>Player Name</td>
							<td>Score</td>
							<td>Rank</td>
						</tr>
					";

		$query = db_select('game_score', 'g')
		    			->fields('g',array('game_name','player_name','score','type','rank',))
		    			->orderBy('type')
		    			->orderBy('score', 'DESC');
		$results = $query->execute();

		while($hasil = $results->fetchObject())
		{
			$game_name = $hasil->game_name;
			$player_name = $hasil->player_name;
			$score = $hasil->score;
			$rank = $hasil->rank;

			$output .= "<tr>
							<td>".$game_name."</td>
							<td>".$player_name."</td>
							<td>".$score."</td>
							<td>".$rank."</td>
						</tr>";
		}
		$output .= "</table><a href = 'game_rank'><button class = 'form-submit'>Generate Leaderboard</button></a>";

		return $output;
	}

	function act_game_rank()
	{
		generate_game_leaderboard();
	}

	/**
	 * Override drupal existing create new account form.
	 */
	function registrasi_form($form, &$form_state){
	    $form['username'] = array(
	        '#title' => 'Username',
	        '#description' => 'Enter a username.',
	        '#type' => 'textfield',
	        '#required' => TRUE,
	    );
	    $form['password'] = array(
	        '#title' => 'Password',
	        '#description' => 'Enter a password.',
	        '#type' => 'password',
	        '#required' => TRUE,
	    );
	    $form['mail'] = array(
	        '#title' => 'Email',
	        '#description' => 'Enter a valid email address.',
	        '#type' => 'textfield',
	        '#required' => TRUE,
	    );
	    $form['submit'] = array(
	        '#type' => 'submit',
	        '#value' => t('Register'),
	    );
   
	    return $form;

    }

    function registrasi_form_validate($form,$form_state)
    {
    	$username = $form_state['values']['username'];
    	$password = $form_state['values']['password'];
    	$email = $form_state['values']['mail'];
    	
    	$query = db_select('users', 'u')->condition('u.name', $username);
		$query->addExpression('COUNT(*)', 'hitung_jumlah_user');

		$results = $query->execute()->fetchObject();
		$cek_jumlah_user = $results->hitung_jumlah_user;

		if($cek_jumlah_user >= 1)
		{
			form_set_error('username','Username already exists!');
    	}
    }

    function registrasi_form_submit($form,$form_state)
    {
    	$username = $form_state['values']['username'];
    	$password = $form_state['values']['password'];
    	$email = $form_state['values']['mail'];

    	generate_new_account($username,$password,$email);
    }

    /**
	 * Override drupal existing login form.
	 */
    function login_form($form,$form_state)
    {
    	global $user;

		// If we are already logged on, go to the user page instead.
		if ($user->uid) {
			drupal_goto('user/' . $user->uid);
		}

		// Display login form:
  		$form['name'] = array('#type' => 'textfield',
    		'#title' => t('Username'),
    		'#size' => 60,
    		'#maxlength' => USERNAME_MAX_LENGTH,
    		'#required' => TRUE,
  		);

  		$form['name']['#description'] = t('Enter your @s username.', array('@s' => variable_get('site_name', 'Drupal')));
  		$form['pass'] = array('#type' => 'password',
    		'#title' => t('Password'),
    		'#description' => t('Enter the password that accompanies your username.'),
    		'#required' => TRUE,
  		);

  		$form['login_markup'] = array(
  			'#type' => 'markup',
  			'#markup' => '<div class="user-links">
        					<span class="passlink"><a href="user/password">Forget your password?</a></span> | <span class="reglink"><a href="user/register">Create an account</a></span>
    					  </div>',
  		);

  		$form['actions'] = array('#type' => 'actions');
  		$form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));

  		return $form;
    }

    function login_form_submit($form,$form_state)
    {
    	global $user;

    	$username = $form_state['values']['name'];
    	$password = $form_state['values']['pass'];

    	generate_login_user($username,$password);
    }

    function act_logout()
    {
    	generate_logout_user();
    }

    /**
	 * Override drupal existing request new password form.
	 */
    function forgot_password_form($form,$form_state)
    {
    	$form['name'] = array(
	        '#title' => 'Username or e-mail address',
	        '#type' => 'textfield',
	        '#required' => TRUE,
	    );

	   	$form['submit'] = array(
	        '#type' => 'submit',
	        '#value' => t('Send new password'),
	    );

	    return $form;
    }

    function forgot_password_form_validate($form,$form_state)
    {
    	$name = $form_state['values']['name'];

    	$query = db_select('users', 'u')
    				->condition(db_or()->condition('u.name', $name)->condition('u.mail', $name));
		$query->addExpression('COUNT(*)', 'hitung_jumlah_user');

		$results = $query->execute()->fetchObject();
		$cek_jumlah_user = $results->hitung_jumlah_user;

		if($cek_jumlah_user < 1)
		{
			form_set_error('name','Username or e-mail does not exist!');
    	}
    }

    function forgot_password_form_submit($form,$form_state)
    {
    	$name = $form_state['values']['name'];

    	generate_new_password($name);
    }

    /**
	* REST API for Create New Account
	*/
    function generate_new_account($username,$password,$email)
    {
    	global $base_url;
    	$request_url = $base_url.'/api/registration/registration/create.json'; // .xml asks for xml data in response
		
		$post_data = array(
    		'username' => $username,
    		'password' => $password,
    		'mail' => $email
    	);

		$post_data = json_encode($post_data);

		// cURL
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $request_url);
		curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
		curl_setopt($curl, CURLOPT_HEADER, TRUE);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
		curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data); // Set POST data
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

		$response = curl_exec($curl);
		
		$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		$header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
		$header = substr($response, 0, $header_size);
		$body = substr($response, $header_size);

		curl_close($curl);

		drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");
		drupal_set_message("<pre>".print_r(json_decode($body),TRUE)."</pre>");
    }

    /**
	* REST API for Forgot Password
	*/
    function generate_new_password($name)
    {
    	global $base_url;
    	$request_url = $base_url.'/api/registration/registration/forgot.json'; // .json asks for json data in response
		
		$post_data = array(
    		'name' => $name,
    	);

		$post_data = json_encode($post_data);

		// cURL
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $request_url);
		curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
		curl_setopt($curl, CURLOPT_HEADER, TRUE);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
		curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data); // Set POST data
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

		$response = curl_exec($curl);
		
		$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		$header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
		$header = substr($response, 0, $header_size);
		$body = substr($response, $header_size);

		curl_close($curl);

		drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");
		drupal_set_message("<pre>".print_r(json_decode($body),TRUE)."</pre>");
    }

    /**
	* REST API for Input Game Score
	*/
    function generate_game_score($game_name,$player_name,$score,$type)
    {
    	global $base_url;
    	$request_url = $base_url.'/api/registration/registration/score.json'; // .json asks for json data in response
		
		$post_data = array(
    		'game_name' => $game_name,
    		'player_name' => $player_name,
    		'score' => $score,
    		'type' => $type
    	);

		$post_data = json_encode($post_data);

		// cURL
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $request_url);
		curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
		curl_setopt($curl, CURLOPT_HEADER, TRUE);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
		curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data); // Set POST data
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

		$response = curl_exec($curl);
		
		$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		$header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
		$header = substr($response, 0, $header_size);
		$body = substr($response, $header_size);

		curl_close($curl);

		drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");
		drupal_set_message("<pre>".print_r(json_decode($body),TRUE)."</pre>");
    }

    /**
	* REST API for Login User
	*/
    function generate_login_user($username,$password)
    {
    	global $base_url;
		// Retrieve CSRF token
		$curl_get = curl_init();
		curl_setopt_array($curl_get, array(
    		CURLOPT_RETURNTRANSFER => 1,
    		CURLOPT_URL => $base_url.'/api/registration/user/token',
		));
		$csrf_token = curl_exec($curl_get);
		curl_close($curl_get);
		$csrf_header = 'X-CSRF-Token: ' . $csrf_token;

		// REST Server URL
		$request_url =  $base_url.'/api/registration/registration/signin.xml';

		// User data
		$user_data = array(
  			'username' => trim($username),
  			'password' => trim($password),
		);

		$userdata = json_encode($user_data);

		// cURL
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $request_url);
		curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
		curl_setopt($curl, CURLOPT_HEADER, TRUE);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json',$csrf_header));
		curl_setopt($curl, CURLOPT_POSTFIELDS, $userdata); // Set POST data
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

		$response = curl_exec($curl);
		
		$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		$header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
		$header = substr($response, 0, $header_size);
		$body = substr($response, $header_size);

		curl_close($curl);

		drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");

		$xml = simplexml_load_string($body);
		$json = json_encode($xml);
		$obj = json_decode($json);
		//$array = json_decode($json,TRUE);
		drupal_set_message("<pre>".print_r($obj,TRUE)."</pre>");

		$status = $obj->status;
		$ket_status = $obj->ket_status;

		if($status == 'S')
		{
			// parse the response
			$xml = new SimpleXMLElement($body);
			$session_cookie = $xml->session_name .'='. $xml->sessid;

			file_put_contents('session_cookie.txt', $session_cookie);

			$user_id = $obj->user->uid;
			
			$form_state = array();
      		$form_state['uid'] = $user_id;      
      		user_login_submit(array(), $form_state);
		}
		else
		{
			drupal_goto();
		}
		
		/*$content = json_decode($body);

		$status = $content->status;
		$ket_status = $content->ket_status;
		if($status == 'S')
		{
			$user_obj = user_load_by_name($username);
			//drupal_set_message("<pre>".print_r($user_obj,TRUE)."</pre>");
      		$form_state = array();
      		$form_state['uid'] = $user_obj->uid;      
      		user_login_submit(array(), $form_state);
		}*/
    }

    /**
	* REST API for Logout User
	*/
    function generate_logout_user()
    {
    	global $base_url;

		// REST Server URL
		$request_url =  $base_url.'/api/registration/user/logout';

		//Session Cookie
		$session_cookie = file_get_contents('session_cookie.txt');

		// cURL
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $request_url);
		curl_setopt($curl, CURLOPT_COOKIE, "$session_cookie"); // use the previously saved session
		curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
		curl_setopt($curl, CURLOPT_HEADER, TRUE);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
		curl_setopt($curl, CURLOPT_POSTFIELDS, ''); // Set POST data
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

		$response = curl_exec($curl);
		
/*		$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		$header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
		$header = substr($response, 0, $header_size);
		$body = substr($response, $header_size);*/

		curl_close($curl);
		drupal_set_message("<pre>".print_r($response,TRUE)."</pre>");		

/*		drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");
		drupal_set_message("<pre>".print_r(json_decode($body),TRUE)."</pre>");

		$content = json_decode($body);

		$status = $content->status;
		$ket_status = $content->ket_status;*/
		drupal_goto();
    }

    /**
	* REST API for Game Leaderboard
	*/
    function generate_game_leaderboard()
    {
    	global $base_url;

		// REST Server URL
		$request_url =  $base_url.'/api/registration/registration/leaderboard.json';

		// cURL
		$curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, $request_url);
		curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
		curl_setopt($curl, CURLOPT_HEADER, TRUE);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
		curl_setopt($curl, CURLOPT_POSTFIELDS, ''); // Set POST data
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

		$response = curl_exec($curl);
	
		$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		$header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
		$header = substr($response, 0, $header_size);
		$body = substr($response, $header_size);

		curl_close($curl);

		drupal_set_message("<pre>".print_r($header,TRUE)."</pre>");
		drupal_set_message("<pre>".print_r(json_decode($body),TRUE)."</pre>");
		drupal_goto("skill_test/game_score");
    }

	/**
	 * Implements of hook_services_resources().
	 */
	function skill_test_services_resources() {
	  	$api = array(
	    	'registration' => array(
	      		'actions' => array(
	        		'create' => array(
	          			'help' => 'Register account user',
	          			'callback' => '_skill_test_blog_retrieve',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	          			'access arguments append' => FALSE,
	          			'args' => array(
	            			array(
	              				'name' => 'account',
	              				'type' => 'array',
	              				'description' => 'The user object',
	              				'source' => 'data',
	              				'optional' => FALSE,
	            			),
	          			),
	        		),
	        		'forgot' => array(
	          			'help' => 'Request new password',
	          			'callback' => '_skill_test_request_new_password',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	          			'access arguments append' => FALSE,
	          			'args' => array(
	            			array(
	              				'name' => 'account',
	              				'type' => 'array',
	              				'description' => 'forgot password',
	              				'source' => 'data',
	              				'optional' => FALSE,
	            			),
	          			),
	        		),
	        		'upload' => array(
	          			'help' => 'Upload File',
	          			'callback' => '_skill_test_upload_file',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	          			'access arguments append' => FALSE,
	          			'args' => array(
	            			array(
	              				'name' => 'attc',
	              				'type' => 'array',
	              				'description' => 'upload file',
	              				'source' => 'data',
	              				'optional' => FALSE,
	            			),
	          			),
	        		),
	        		'signin' => array(
	          			'help' => 'Login user',
	          			'callback' => '_skill_test_login_usr',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	          			'access arguments append' => FALSE,
	          			'args' => array(
	            			array(
	              				'name' => 'account',
	              				'type' => 'array',
	              				'description' => 'Login user',
	              				'source' => 'data',
	              				'optional' => FALSE,
	            			),
	          			),
	        		),
	        		'score' => array(
	          			'help' => 'Input Game Score',
	          			'callback' => '_skill_test_game_score',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	          			'access arguments append' => FALSE,
	          			'args' => array(
	            			array(
	              				'name' => 'account',
	              				'type' => 'array',
	              				'description' => 'Input game score',
	              				'source' => 'data',
	              				'optional' => FALSE,
	            			),
	          			),
	        		),
	        		'signout' => array(
	          			'help' => 'Logout user',
	          			'callback' => '_skill_test_logout_usr',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	        		),
	        		'leaderboard' => array(
	          			'help' => 'Create Game Leaderboard',
	          			'callback' => '_skill_test_game_leaderboard',
	          			'access callback' => '_skill_test_access',
	          			'access arguments' => array('access content'),
	        		),
	      		),
	    	),
	  	);
	  	return $api;
	}

	/** 
	* Access callback 
	*/ 
	function _skill_test_access() { return TRUE; }
	
	/**
 	* Callback function for register account user
 	*/
	function _skill_test_blog_retrieve($args) {
		//set up the user fields
		$username = $args['username'];
		$password = $args['password'];
		$email = $args['mail'];
		$fields = array(
			'name' => $username,
			'mail' => $email,
			'pass' => $password,
			'status' => 1,
			'init' => $email,
			'roles' => array(
				DRUPAL_AUTHENTICATED_RID => 'authenticated user',
			),
		);

		//the first parameter is left blank so a new user is created
		$account = user_save('', $fields);

		$status = "S";
	   	$ket_status = "Created a new user account for ".$username."";

	   	$data['status'] = $status;
	   	$data['ket_status'] = $ket_status;
		$data['args'] = $args;

		return $data;
	}

	/**
 	* Callback function for request new password
 	*/
	function _skill_test_request_new_password($args) {
    	global $base_url;
		$name = $args['name'];

		$query = db_select('users', 'u')
	    		->fields('u',array('name','mail'))
	    		->condition(db_or()->condition('u.name', $name)->condition('u.mail', $name));
	   	$results = $query->execute()->fetchObject();

	   	$email = $results->mail;

	   	$mail_sent = custom_drupal_mail('default_from', $email, '(Serial Games) - Konfirmasi Reset Password', 'Kepada Yth. Pemilik email '.$email.'<br/> di<br/> Tempat<br/><br/>Untuk melakukan proses reset password, silahkan klik tautan di bawah ini.<br/><a href="'.$base_url.'" target="_blank">Klik disini</a><br/><br/>Hormat kami<br/><br/>Pengelola');

	   	$status = "S";
	   	$ket_status = "Further instructions have been sent to your e-mail address.";

	   	$data['status'] = $status;
	   	$data['ket_status'] = $ket_status;
		return $data;
	}


	/**
 	* Callback function for login user
 	*/
	function _skill_test_login_usr($args)
	{
		$username = $args['username'];
		$password = $args['password'];

		global $user;

  		if ($user->uid) {
    		// user is already logged in
    		$status = "E";
    		$ket_status = "Already logged in as ".$user->name;

    		$data['status'] = $status;
    		$data['ket_status'] = $ket_status;

    		return $data;
  		}

  		// Check if account is active.
  		if (user_is_blocked($username)) {
  			$status = "E";
  			$ket_status = "The username ".$username." has not been activated or is blocked.";

  			$data['status'] = $status;
    		$data['ket_status'] = $ket_status;

    		return $data;
  		}

  		// Emulate drupal native flood control: check for flood condition.
  		$flood_state = array();
  		if (variable_get('services_flood_control_enabled', TRUE)) {
    		$flood_state = _user_resource_flood_control_precheck($username);
  		}

  		// Only authenticate if a flood condition was not detected.
  		if (empty($flood_state['flood_control_triggered'])) {
    		$uid = user_authenticate($username, $password);
  		}
  		else {
    		$uid = FALSE;
  		}

  		// Emulate drupal native flood control: register flood event, and throw error
  		// if a flood condition was previously detected
  		if (variable_get('services_flood_control_enabled', TRUE)) {
    		$flood_state['uid'] = $uid;
    		_user_resource_flood_control_postcheck($flood_state);
  		}

  		if ($uid) {
    		$user = user_load($uid);
    		if ($user->uid) {
      			user_login_finalize();

      			$return = new stdClass();
      			$return->sessid = session_id();
      			$return->session_name = session_name();
      			$return->token = drupal_get_token('services');

      			$account = clone $user;

      			services_remove_user_data($account);

      			$return->user = $account;

      			$return->status = "S";
      			$return->ket_status = "Authentication Success.";

      			return $return;
    		}
  		}
  		watchdog('user', 'Invalid login attempt for %username.', array('%username' => $username));

  		$status = "E";
  		$ket_status = "Wrong username or password.";

  		$data['status'] = $status;
    	$data['ket_status'] = $ket_status;

    	return $data;
	}

	/**
 	* Callback function for logout user
 	*/
	function _skill_test_logout_usr()
	{
	  	global $user;

	  	/*if (!$user->uid) {
		    // User is not logged in
	    	return services_error(t('User is not logged in.'), 406);
	  	}*/

	  	watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

	  	// Destroy the current session.
	  	module_invoke_all('user_logout', $user);
	  	session_destroy();

	  	// Load the anonymous user.
	  	$user = drupal_anonymous_user();

		$status = "S";
		$ket_status = "Logout Success";

		$data['status'] = $status;
	   	$data['ket_status'] = $ket_status;
	   	return $user;
	}


	/**
 	* Callback function for upload file
 	*/
	function _skill_test_upload_file($args) {
		global $user;
		$path_public = variable_get('file_public_path', conf_path() . '/files');
		if(isset($_FILES['filedata']['name'])){
			$file = new stdClass();
           	$file->status   = 0;
            $file->filename = trim(drupal_basename($args['filename']), '.');
            $file->uri      = $args['filename'];
            $file->filemime = file_get_mimetype($file->filename);
            $file->filesize = $_FILES['filedata']['size'];
            $file->uid 		= 1;
            $destination = 'public://';
            $destination_scheme = file_uri_scheme($destination);
            if (!$destination_scheme || !file_stream_wrapper_valid_scheme($destination_scheme)) {
                return FALSE;
            }
            $file->destination = file_destination($destination . $file->filename, $replace);
            if (substr($destination, -1) != '/') {
                $destination .= '/';
            }
            $file->uri = $file->destination;
            if (!drupal_move_uploaded_file($_FILES['filedata']['tmp_name'], $file->uri)) {
                watchdog('file', 'Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->uri));
                    return FALSE;
            }
            drupal_chmod($file->uri);
            $file = file_save($file);

			/* $file = move_uploaded_file($_FILES["filedata"]["tmp_name"],"public://" . $args['filename']); */

			if ($file->fid) {
				$node = new stdClass();
				$node->type = "list_file";
				node_object_prepare($node);

				$node->uid = 1;
				$node->title = 'Upload File';
				$node->sticky = 0;
				$node->language = 'en';

				// Let's add standard body field
				$node->body['und'][0]['format'] = 'filtered_html';
				$node->body['und'][0]['value'] = 'Body info';

				$node->field_filename[LANGUAGE_NONE][0]['value'] = $file->filename;
				$node->field_filemime[LANGUAGE_NONE][0]['value'] = $file->filemime;
				$node->field_fid[LANGUAGE_NONE][0]['value'] = $file->fid;
				$node->field_uri[LANGUAGE_NONE][0]['value'] = $file->uri;

				$node->revision = 0;

				$node = node_submit($node);
				node_save($node);
			}
		}
		return $file;
	}

	/**
 	* Callback function for input game score
 	*/
	function _skill_test_game_score($args)
	{
		$game_name = $args['game_name'];
		$player_name = $args['player_name'];
		$score = $args['score'];
		$type = $args['type'];

		$pdid = db_insert('game_score')
					->fields(array(
						'game_name' => $game_name,
						'player_name' => $player_name,
						'score' => $score,
						'type' => $type
					))->execute();

		$status = "S";
	   	$ket_status = "Update Success";

	   	$data['status'] = $status;
	   	$data['ket_status'] = $ket_status;
		return $data;
	}

	function _skill_test_game_leaderboard()
	{
		$sql_query = db_select('game_score', 'g')
					->distinct()
	    			->fields('g',array('type'))
	    			->orderBy('type');
	   	$result = $sql_query->execute();
	   	while($baris = $result->fetchObject())
	   	{
	   		$game_type = $baris->type;
			$query = db_select('game_score', 'g')
		    			->fields('g',array('score','type', 'id'))
		    			->condition('g.type',$game_type)
		    			->orderBy('score', 'DESC');
		   	$results = $query->execute();

		   	$hitung = 1;
		   	while($hasil = $results->fetchObject())
		   	{
		   		$id_player_game = $hasil->id;
		   		$prid= db_update('game_score')
								->fields(array(
									'rank' => $hitung,
								))
								->condition('id', $id_player_game, '=')	
								->execute();
				$hitung++;
		   	}
	   	}

	   	$status = "S";
	   	$ket_status = "Update Success";

	   	$data['status'] = $status;
	   	$data['ket_status'] = $ket_status;
		return $data;
	}

	function custom_drupal_mail($from = 'default_from', $to, $subject = null, $message, $filename = null, $filepath = null) {
  		$my_module = 'custom';
  		$my_mail_token = microtime();
  		if ($from == 'default_from') {
    		$from = variable_get('system_mail', 'Serial Games Drupal <serial_games@sg.co.id>');
  		}
	  
  		if ($filepath != null) {
    		$uri = $filepath;
    		if ($wrapper = file_stream_wrapper_get_instance_by_uri($uri)) {
      			$path = $wrapper->realpath();
    		}
    		//drupal_set_message('Real Path : '.$path);
    		//* Default File Type : PDF
    		$attachment = array(
      			'filecontent' => file_get_contents($path),
      			'filename' => $filename,
      			'filemime' => 'application/pdf',
    		);
  		}
  
		if(isset($attachment)){
			$message = array(
    			'id' => $my_module . '_' . $my_mail_token,
	  			'from' => $from,
    			'to' => $to,
    			'subject' => $subject,
    			'body' => array($message),
    			'headers' => array(
      				//'Content-Type' => 'text/plain; charset=UTF-8;', // XXX
	  				'Content-Type' => 'text/html; charset=iso-8859-1; format=flowed',
      				'From' => $from, 
      				'Sender' => $from, 
      				'Return-Path' => $from,
    			),
    			'params' => array(
      				'attachments' => array($attachment),
    			)
  			);
    	}else{
			$message = array(
    			'id' => $my_module . '_' . $my_mail_token,
	  			'from' => $from,
    			'to' => $to,
    			'subject' => $subject,
    			'body' => array($message),
    			'headers' => array(
      				//'Content-Type' => 'text/plain; charset=UTF-8;', // XXX
	  				'Content-Type' => 'text/html; charset=iso-8859-1; format=flowed',
      				'From' => $from, 
      				'Sender' => $from, 
      				'Return-Path' => $from,
    			),
    			'params' => array(
      				'attachments' => array(),
    			)
  			);
    	}
    
  		$system = drupal_mail_system($my_module, $my_mail_token);
  		$message = $system->format($message);
  		if ($system->mail($message)) {
    		return TRUE;
  		}
  		else {
    		return FALSE;
  		}
	}



?>